# Generated by Django 4.2 on 2024-06-23 20:33

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='custom_user',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('activation_code', models.CharField(default='', max_length=72, verbose_name='Activation Code')),
                ('avatar', models.ImageField(null=True, upload_to='avatars/', verbose_name='user avatar')),
                ('user_ranking', models.CharField(choices=[('copper', 'copper'), ('bronze', 'bonze'), ('silver', 'silver'), ('gold', 'gold')], default='copper', max_length=10, verbose_name="user's rank")),
                ('user_total_score', models.IntegerField(default=0, verbose_name='user score')),
                ('kill_per_death', models.FloatField(default=0, verbose_name="user's k/d")),
                ('birth_date', models.DateTimeField(blank=True, null=True, verbose_name='Users BirthDate')),
                ('user_status', models.CharField(choices=[('normal', 'normal'), ('banned', 'banned')], default='normal', max_length=50)),
                ('reset_pass_code', models.CharField(blank=True, default='', max_length=72, null=True, verbose_name='reset pass code')),
                ('account_balance', models.DecimalField(decimal_places=4, default=0, max_digits=8, verbose_name='total balance')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Block_List',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('users', models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='list of users')),
            ],
        ),
        migrations.CreateModel(
            name='Friends_List',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('users', models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='list of users')),
            ],
        ),
        migrations.CreateModel(
            name='User_Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('show_info_to', models.CharField(choices=[('friends', 'friends'), ('everyone', 'everyone'), ('noone', 'noone')], default='friends', max_length=20)),
                ('receive_messages_from', models.CharField(choices=[('friends', 'friends'), ('everyone', 'everyone'), ('noone', 'noone')], default='friends', max_length=20)),
                ('who_can_befriend', models.CharField(choices=[('friends', 'friends'), ('everyone', 'everyone'), ('noone', 'noone')], default='friends', max_length=20)),
                ('who_can_send_play_request', models.CharField(choices=[('friends', 'friends'), ('everyone', 'everyone'), ('noone', 'noone')], default='', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='User_Sessions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=200, unique=True, verbose_name='Session Key')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Owner of session')),
            ],
        ),
        migrations.CreateModel(
            name='User_Report_List',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='User_Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('harrasement', 'harrasement'), ('racial_slurs', 'racial_slurs'), ('cheating', 'cheating'), ('racism', 'racism'), ('other', 'other')], default='other', max_length=15)),
                ('made_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('parent_list', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_moudle.user_report_list')),
            ],
        ),
        migrations.CreateModel(
            name='User_Friends_List',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parent_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='this friend list belogns to')),
                ('user_list', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='user_moudle.friends_list', verbose_name='users list')),
            ],
        ),
        migrations.CreateModel(
            name='User_Block_List',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parent_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='this block list belogns to')),
                ('user_list', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='user_moudle.block_list', verbose_name='users list')),
            ],
        ),
        migrations.CreateModel(
            name='Friend_Request_List',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('List_Owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='whom this list belongs to')),
            ],
        ),
        migrations.CreateModel(
            name='Friend_Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Parent_List', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user_moudle.friend_request_list', verbose_name='Parent list of this request')),
                ('sent_by', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='sent by')),
            ],
        ),
        migrations.AddField(
            model_name='custom_user',
            name='user_settings',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to='user_moudle.user_settings'),
        ),
    ]
